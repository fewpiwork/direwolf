package direwolf

import (
	"net/http"
	"strings"
)

// RequestSetting is a prepared RequestSetting that generated by prepareRequestSetting().
// It came from your input in RequestSetting.
type RequestSetting struct {
	Method      string
	URL         string
	Params      *Params
	Headers     http.Header
	Data        Data
	PostForm    *PostForm
	Cookies     *Cookies
	Proxy       string
	RedirectNum int
	Timeout     int
}

// setHeader get the key-value from Headers to RequestSetting.Headers.
func (req *RequestSetting) setHeader(h Headers) {
	req.Headers = http.Header{}
	for key, slice := range h {
		for _, value := range slice {
			req.Headers.Add(key, value)
		}
	}
}

// // setParams set RequestSetting.Params.Encode Params and join it to url.
// func (req *RequestSetting) setParams(p Params) {
// 	// for key, value := range p {

// 	// }
// 	req.URL = req.URL + "?" + req.Params.URLEncode() // add params to url
// }

// // setCookies set RequestSetting.Cookies
// func (req *RequestSetting) setCookies(c Cookies) {
// 	req.Cookies = url.Values(c)
// }

// NewRequestSetting is to process the parameters from user input.Generate PreRequest object.
func NewRequestSetting(method string, URL string, args ...interface{}) *RequestSetting {
	reqSetting := &RequestSetting{ // new a RequestSetting and set default field
		RedirectNum: 5,
		Timeout:     30,
	}
	reqSetting.Method = strings.ToUpper(method) // Upper the method string
	reqSetting.URL = URL

	// Check the type of the paramter and handle it.
	for _, arg := range args {
		switch a := arg.(type) {
		case Headers:
			reqSetting.setHeader(a)
		case http.Header:
			reqSetting.Headers = a
		case *Params:
			reqSetting.Params = a
			reqSetting.URL = reqSetting.URL + "?" + reqSetting.Params.URLEncode()
		case *PostForm:
			reqSetting.PostForm = a
		case Data:
			reqSetting.Data = a
		case *Cookies:
			reqSetting.Cookies = a
		case Proxy:
			reqSetting.Proxy = string(a)
		}
	}
	return reqSetting
}
